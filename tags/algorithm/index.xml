<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Algorithm on Note</title>
    <link>https://note-site.pages.dev/tags/algorithm/</link>
    <description>Recent content in Algorithm on Note</description>
    <image>
      <title>Note</title>
      <url>https://note-site.pages.dev/opengraph.webp</url>
      <link>https://note-site.pages.dev/opengraph.webp</link>
    </image>
    <generator>Hugo -- 0.147.2</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 10 Oct 2023 21:49:17 +0800</lastBuildDate>
    <atom:link href="https://note-site.pages.dev/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基础问题</title>
      <link>https://note-site.pages.dev/posts/algorithm/%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 10 Oct 2023 21:49:17 +0800</pubDate>
      <guid>https://note-site.pages.dev/posts/algorithm/%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;计算数组中所有数在数轴上两两之间的距离的和&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如：&lt;code&gt;[1,2,4,9]&lt;/code&gt;，结果为 &lt;code&gt;(2-1)+(4-1)+(9-1)+(4-2)+(9-2)+(9-4)=26&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;思路：从小到大枚举 $nums[i]$，此时左边有 $i$ 个数字，右边有 $n-i$ 个数字（算上 $nums[i]$），所以共有 $i\times (n−i)$ 对数字在计算距离时会累加 $nums[i] - nums[i-1]$。我们依次遍历完 $[1,n-1]$ 范围内所有的 $nums[i]$，将 $(nums[i] - nums[i - 1]) * i * (n - i)$ 累加到答案中即可。&lt;/p&gt;</description>
    </item>
    <item>
      <title>快速幂</title>
      <link>https://note-site.pages.dev/posts/algorithm/%E5%BF%AB%E9%80%9F%E5%B9%82/</link>
      <pubDate>Mon, 09 Oct 2023 14:34:52 +0800</pubDate>
      <guid>https://note-site.pages.dev/posts/algorithm/%E5%BF%AB%E9%80%9F%E5%B9%82/</guid>
      <description>&lt;p&gt;快速幂，二进制取幂（Binary Exponentiation，也称平方法），是一个在 $O(\log n)$ 的时间内计算 $a^n$ 的小技巧，而暴力的计算需要 $O(n)$ 的时间。&lt;/p&gt;
&lt;h2 id=&#34;过程&#34;&gt;过程&lt;/h2&gt;
&lt;p&gt;首先将 $n$ 表示为二进制，例如&lt;/p&gt;</description>
    </item>
    <item>
      <title>费马小定理</title>
      <link>https://note-site.pages.dev/posts/algorithm/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/</link>
      <pubDate>Sun, 03 Sep 2023 11:20:41 +0800</pubDate>
      <guid>https://note-site.pages.dev/posts/algorithm/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;逆元&#34;&gt;逆元&lt;/h2&gt;
&lt;p&gt;逆元通常是用来解决除法求模问题的，求模运算有以下法则：&lt;/p&gt;
$$
\begin{cases}
(a+b)\%c&amp;=&amp;(a\%c+b\%c)\%c\quad &amp;加法法则\\[1ex]
(a-b)\%c&amp;=&amp;(a\%c-b\%c)\%c\quad &amp;减法法则\\[1ex]
(a*b)\%c&amp;=&amp;(a\%c*b\%c)\%c\quad &amp;乘法法则
\end{cases}
$$&lt;p&gt;可以发现，除法求模没有相应的法则。当计算 $\cfrac{a}{b}\%c$ 时，如果 $a$，$b$ 很大，不能在计算完之后取模，可以通过变换将除法变为乘法，然后就可以通过上面的公式取模了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TopK 问题</title>
      <link>https://note-site.pages.dev/posts/algorithm/topk-%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 18 Jul 2023 21:05:09 +0800</pubDate>
      <guid>https://note-site.pages.dev/posts/algorithm/topk-%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;TopK 问题指的是寻找数组第 $K$ 大/小的元素。一种简单的做法是对数组排序，然后取第 $K$ 个元素，时间复杂度为 $O(NlogN)$，接下来以寻找第 $K$ 大的元素为例，介绍另外两种做法。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>